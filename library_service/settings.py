"""
Django settings for library_service project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from django.utils.crypto import get_random_string

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

CHARS = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'

SECRET_KEY = ''

try:
    secret_key_file = open('.secret.txt', 'r')
    secret_tmp = secret_key_file.readline()
    if len(secret_tmp) == 50:
        SECRET_KEY = secret_tmp
        secret_key_file.close()
    else:
        secret_key_file.close()
        os.remove('.secret.txt')
        raise FileNotFoundError
except FileNotFoundError:
    SECRET_KEY = get_random_string(50, CHARS)
    secret_key_file = open('.secret.txt', 'x')
    secret_key_file.write(SECRET_KEY)
    secret_key_file.close()

# e^81bc@z&=j1%dq(%307ye*=81t$osh!@nq+f8)2ek1b*m1)0p

# Invite key generator for librarians and admins
CHARS_STUFF = 'abcdefghijklmnopqrstuvwxyz0123456789'

ADMIN_KEY = ''

try:
    admin_key_file = open('.admin_key.txt', 'r')
    key_tmp = admin_key_file.readline()
    if len(key_tmp) == 10:
        ADMIN_KEY = key_tmp
        admin_key_file.close()
    else:
        admin_key_file.close()
        os.remove('.admin_key.txt')
        raise FileNotFoundError
except FileNotFoundError:
    ADMIN_KEY = get_random_string(10, CHARS_STUFF)
    admin_key_file = open('.admin_key.txt', 'x')
    admin_key_file.write(ADMIN_KEY)
    admin_key_file.close()

LIBRARIAN_KEY = ''

try:
    librarian_key_file = open('.librarian_key.txt', 'r')
    key_tmp = librarian_key_file.readline()
    if len(key_tmp) == 10:
        LIBRARIAN_KEY = key_tmp
        librarian_key_file.close()
    else:
        librarian_key_file.close()
        os.remove('.librarian_key.txt')
        raise FileNotFoundError
except FileNotFoundError:
    LIBRARIAN_KEY = get_random_string(10, CHARS_STUFF)
    librarian_key_file = open('.librarian_key.txt', 'x')
    librarian_key_file.write(LIBRARIAN_KEY)
    librarian_key_file.close()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', '127.0.0.1']

SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'crispy_forms',

    'core',
    'user_profile',
    'book',
    'library',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

ROOT_URLCONF = 'library_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'library_service.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Allauth settings
ACCOUNT_EMAIL_REQUIRED = True

# Login/Logout urls
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

LOGOUT_URL = '/accounts/logout/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

FIXTURE_DIRS = [
    'fixtures',
]

ACCOUNT_FORMS = {'signup': 'user_profile.forms.CustomSignupForm'}
